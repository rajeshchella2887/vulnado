"""
Django settings for ntt_portal project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config(
    "SECRET_KEY",
    default="django-insecure-8ew$!n63j-!x+*6ht65qs%58#*hvj&r2j==^$03-o(0=nr)9#u",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

# DEBUG = True
X_FRAME_OPTIONS = "SAMEORIGIN"
ALLOWED_HOSTS = (config("DJANGO_ALLOWED_HOSTS", default="127.0.0.1 localhost")).split(" ")

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "rest_framework",
    "corsheaders",
    "health_check",
    "health_check.db",  # stock Django health checkers
    "crispy_forms",
    "webpack_loader",
    "crispy_bootstrap5",
    "ntt_portal_library.rbac.local_permission_registry",
    "ntt_portal_library.message_queue",
    "accounts",
    "authorization",
    "landing",
    "dashboards",
    "providers",
    "connectors",
    "services",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django_session_timeout.middleware.SessionTimeoutMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.auth.middleware.RemoteUserMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "ntt_portal.urls"
# Session will expire after 5 minutes
SESSION_EXPIRE_SECONDS = 300
# Invalidate the session after recent/last session
SESSION_EXPIRE_AFTER_LAST_ACTIVITY = True
# Redirect to login page once session expire
# SESSION_TIMEOUT_REDIRECT = '/accounts/login/'
LOGIN_URL = "/accounts/login/"
# Session automatically expires once browse closed
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

TEMPLATE_DIR = os.path.join(BASE_DIR.parent, "templates")

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [TEMPLATE_DIR],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "ntt_portal.permissions.context_processor.auth",
            ],
            "libraries": {
                "admin_gradient": "templatetags.admin_gradient",
                "replace_value": "templatetags.replace_value",
                "itsm_custom_tags": "connectors.itsm_custom_tags",
            },
        },
    },
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"
CRISPY_FAIL_SILENTLY = not DEBUG

WSGI_APPLICATION = "ntt_portal.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# NOTE: We might want to use a different, faster db for production, something like redis
# NOTE: using db for session
DATABASES = {
    "default": {
        "ENGINE": config("SQL_ENGINE", ""),  # let fail if not specified
        "NAME": config("SQL_DATABASE", ""),  # let fail if not specified
        "USER": config("SQL_USER", "user"),
        "PASSWORD": config("SQL_PASSWORD", "password"),
        "HOST": config("SQL_HOST", "localhost"),
        "PORT": config("SQL_PORT", "5432"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# ==============================================================================
# STATIC FILES SETTINGS
# ==============================================================================

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# we are using whitenoise to serve static files
# whitenoise settings for static files
# STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

STATIC_URL = "/static/"

STATIC_ROOT = os.path.join(BASE_DIR.parent, "staticfiles")

STATICFILES_DIRS = [os.path.join(BASE_DIR.parent, "static")]

# additional static directories other than static root
# STATICFILES_DIRS = []

STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
)

# ==============================================================================
# MEDIA FILES SETTINGS
# ==============================================================================

# don't server user files from server media, use a separate storage
MEDIA_URL = "/media/"

MEDIA_ROOT = os.path.join(BASE_DIR.parent, "mediafiles")

# ==============================================================================
# STORAGE
# ==============================================================================

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

# ==============================================================================

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# NOTE: replace the auth backend because we will not be relying on this server for auth
AUTHENTICATION_BACKENDS = [
    "accounts.backends.NTTAuthBackend",
]

# ==============================================================================
# SERVICE MAPPINGS
# ==============================================================================

# NOTE: we only need AUTH_SERVICE, which acts as our api gateway

AUTH_SERVICE_HOST = config("AUTH_SERVICE_HOST", default="http://localhost:8001")

WEBPACK_LOADER = {
    "DEFAULT": {
        "BUNDLE_DIR_NAME": "react_app/static/",
        "STATS_FILE": os.path.join(BASE_DIR, "../react_app/webpack-stats.json"),
    }
}


LOCAL_PERMISSIONS_MODULES = [
    "ntt_portal.permissions.ntt_roles",
]
LOCAL_PERMISSION_REGISTRY_SYNC_EVENT_MODULE = "ntt_portal.permissions.permissions_sync_event_handlers"


MESSAGE_QUEUE_CONNECTION_SETTINGS = {
    "hostname": config("BROKER_URL", "localhost"),
    "port": config("MQ_PORT", 5672),
    "username": config("MQ_USERNAME", "guest"),
    "password": config("MQ_PASSWORD", "guest"),
}
